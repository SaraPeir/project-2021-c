{"version":3,"sources":["webpack://project-2021-c/./src/client/App.js","webpack://project-2021-c/./src/client/index.js","webpack://project-2021-c/./src/redux/slices/counter.js","webpack://project-2021-c/./src/redux/store.js"],"names":["App","props","useState","isCountdownDisplayed","setCountdownDisplayed","countdown","toggleCountdown","arrayFromFetch","showInConsole","console","log","store","loadableReady","hydrate","document","getElementById","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","reducer","configureStore","counter","counterReducer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA,IAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AACnB,kBAAsDC,+CAAQ,CAAC,KAAD,CAA9D;AAAA;AAAA,MAAOC,oBAAP;AAAA,MAA6BC,qBAA7B;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,QAAGF,oBAAH,EAAyB;AACrB,0BAAO,iDAAC,SAAD,OAAP;AACH;;AACD;AACH,GALD;;AAOA,MAAMG,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WAAMF,qBAAqB,CAAC,CAACD,oBAAF,CAA3B;AAAA,GAAxB;;AACA,MAAMI,cAAc,GAAGN,KAAK,CAACM,cAA7B;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACD,cAAD;AAAA,WAAoBE,OAAO,CAACC,GAAR,CAAYH,cAAZ,CAApB;AAAA,GAAtB;;AAEA,sBACI,iDAAC,iDAAD;AAAU,SAAK,EAAEI,iDAAKA;AAAtB,kBACI,iDAAC,MAAD,OADJ,CADJ;AAKH,CAnBD;;AAqBA,iEAAeX,GAAf,E;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,iEAAeY,kEAAa,CAAC,YAAM;AAC/BC,oDAAO,eACH,iDAAC,yCAAD,OADG,EAELC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAFK,CAAP;AAIH,CAL2B,CAA5B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I;;;;;;;;;;;;;;;;;;;;AC7BA;AAEO,IAAMC,YAAY,GAAGC,6DAAW,CAAC;AACtCC,MAAI,EAAE,SADgC;AAEtCC,cAAY,EAAE;AACZC,SAAK,EAAE;AADK,GAFwB;AAKtCC,UAAQ,EAAE;AACRC,aAAS,EAAE,mBAACC,KAAD,EAAW;AACpB;AACA;AACA;AACA;AACAA,WAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,aAAS,EAAE,mBAACD,KAAD,EAAW;AACpBA,WAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAVO;AAWRK,qBAAiB,EAAE,2BAACF,KAAD,EAAQG,MAAR,EAAmB;AACpCH,WAAK,CAACH,KAAN,IAAeM,MAAM,CAACC,OAAtB;AACD;AAbO;AAL4B,CAAD,CAAhC,C,CAsBP;;AACO,4BAAoDX,YAAY,CAACY,OAAjE;AAAA,IAAQN,SAAR,yBAAQA,SAAR;AAAA,IAAmBE,SAAnB,yBAAmBA,SAAnB;AAAA,IAA8BC,iBAA9B,yBAA8BA,iBAA9B;;AAEP,iEAAeT,YAAY,CAACa,OAA5B,E;;;;;;;;;;;;;;;;;AC3BA;AACA;AAEA,iEAAeC,gEAAc,CAAC;AAC5BD,SAAO,EAAE;AACLE,WAAO,EAAEC,oDAAcA;AADlB;AADmB,CAAD,CAA7B,E","file":"main.e111ef5b3db60873bbf6.js","sourcesContent":["import React, {useState} from \"react\"\r\nimport { Provider } from 'react-redux'\r\nimport store from '../redux/store'\r\n\r\nconst App = (props) => {\r\n    const [isCountdownDisplayed, setCountdownDisplayed] = useState(false);\r\n\r\n    const countdown = () => {\r\n        if(isCountdownDisplayed) {\r\n            return <Countdown />\r\n        }\r\n        return;\r\n    }\r\n\r\n    const toggleCountdown = () => setCountdownDisplayed(!isCountdownDisplayed)\r\n    const arrayFromFetch = props.arrayFromFetch;\r\n    const showInConsole = (arrayFromFetch) => console.log(arrayFromFetch);\r\n\r\n    return(\r\n        <Provider store={store}>\r\n            <Global />\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","/* import React from 'react'\r\nimport { hydrate } from 'react-dom'\r\nimport App from './App';\r\n\r\nhydrate(\r\n  <App arrayFromFetch={window.__INITIAL_ARRAYFETCH__} />,\r\n  document.getElementById('app')\r\n);\r\n\r\n */\r\nimport React from 'react';\r\nimport { hydrate } from 'react-dom';\r\nimport App from './App';\r\nimport { loadableReady } from '@loadable/component';\r\n\r\nexport default loadableReady(() => {\r\n    hydrate(\r\n        <App  />,\r\n      document.getElementById('app'),\r\n    );\r\n});\r\n\r\n/* export default () => {\r\n  hydrate(\r\n    <Provider store={store}>\r\n      <App  />\r\n    </Provider>,\r\n    document.getElementById('app'),\r\n  );\r\n} */\r\n \r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\nexport default counterSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\r\nimport counterReducer from './slices/counter'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n      counter: counterReducer\r\n  },\r\n})"],"sourceRoot":""}